import { useState, useEffect, useCallback } from 'react';
import { toast } from "@/hooks/use-toast";
import { useIsMobile } from "@/hooks/use-mobile";
import { PhantomWallet, PHANTOM_CONSTANTS } from '@/types/phantom';
import { usePhantomInstance } from './usePhantomInstance';

export const usePhantomWallet = () => {
  const [connected, setConnected] = useState(false);
  const [phantomWallet, setPhantomWallet] = useState<PhantomWallet | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const isMobile = useIsMobile();
  const getPhantomInstance = usePhantomInstance();

  const resetWalletState = useCallback(() => {
    setConnected(false);
    setPublicKey(null);
    console.log("üîÑ √âtat du wallet r√©initialis√©");
  }, []);

  const updateConnectionState = useCallback((wallet: PhantomWallet) => {
    if (wallet.publicKey) {
      const key = wallet.publicKey.toString();
      setPublicKey(key);
      setConnected(true);
      console.log("‚úÖ Connect√© avec la cl√©:", key);
      console.log("üí≥ Adresse du wallet:", key);
    } else {
      resetWalletState();
    }
  }, [resetWalletState]);

  const attemptConnection = useCallback(async (wallet: PhantomWallet): Promise<boolean> => {
    try {
      console.log("üîÑ Tentative de connexion au wallet...");
      
      try {
        await wallet.disconnect();
        console.log("üîå D√©connexion r√©ussie pour une connexion propre");
      } catch (e) {
        console.log("Info: Pas de d√©connexion n√©cessaire");
      }
      
      console.log("üîÑ Demande de connexion au wallet...");
      const response = await wallet.connect();
      
      if (response.publicKey) {
        console.log("üéØ Cl√© publique obtenue:", response.publicKey.toString());
        updateConnectionState(wallet);
        
        try {
          console.log("üîÑ Demande des permissions de transaction...");
          await wallet.request({ 
            method: "connect",
            params: {
              permissions: ["sign_transaction", "sign_message"]
            }
          });
          console.log("‚úÖ Permissions de transaction accord√©es");
          
          toast({
            title: "Wallet Connect√©",
            description: `Connect√© √† l'adresse: ${response.publicKey.toString().slice(0, 8)}...`,
          });
          return true;
        } catch (permError) {
          console.error("‚ùå Erreur lors de la demande des permissions:", permError);
          resetWalletState();
          toast({
            title: "Attention",
            description: "Veuillez accorder les permissions de transaction",
            variant: "destructive",
          });
          return false;
        }
      }
      return false;
    } catch (error) {
      console.error("‚ùå √âchec de la tentative de connexion:", error);
      resetWalletState();
      if (!isMobile) {
        toast({
          title: "√âchec de la Connexion",
          description: "Impossible de se connecter √† Phantom wallet",
          variant: "destructive",
        });
      }
      return false;
    }
  }, [isMobile, resetWalletState, updateConnectionState]);

  useEffect(() => {
    const wallet = getPhantomInstance();
    if (wallet) {
      console.log("üîÑ Initialisation du wallet...");
      setPhantomWallet(wallet);
      
      if (wallet.publicKey) {
        console.log("üîç Wallet d√©j√† connect√©, mise √† jour de l'√©tat...");
        updateConnectionState(wallet);
      }
      
      wallet.on('connect', () => {
        console.log("üîå √âv√©nement connect d√©tect√©");
        updateConnectionState(wallet);
      });
      
      wallet.on('disconnect', () => {
        console.log("üîå √âv√©nement disconnect d√©tect√©");
        resetWalletState();
        toast({
          title: "Wallet D√©connect√©",
          description: "D√©connexion du Phantom wallet",
        });
      });
    } else {
      console.log("‚ùå Aucune instance Phantom trouv√©e");
    }
  }, [getPhantomInstance, resetWalletState, updateConnectionState]);

  const handleConnectWallet = useCallback(async () => {
    console.log("üîÑ D√©marrage du processus de connexion...");
    
    if (isMobile && !phantomWallet) {
      console.log("üì± Redirection vers Phantom mobile");
      const currentUrl = window.location.href;
      const encodedUrl = encodeURIComponent(currentUrl);
      const encodedRef = encodeURIComponent(currentUrl);
      const phantomDeepLink = `https://phantom.app/ul/browse/${encodedUrl}?ref=${encodedRef}`;
      
      console.log("üîó Deep link g√©n√©r√©:", phantomDeepLink);
      window.location.href = phantomDeepLink;
      return;
    }

    if (!phantomWallet) {
      console.log("‚ö†Ô∏è Phantom non d√©tect√©");
      toast({
        title: "Phantom Wallet Non Trouv√©",
        description: "Veuillez installer Phantom Wallet pour continuer",
        variant: "destructive",
      });
      window.open(PHANTOM_CONSTANTS.DOWNLOAD_LINK, '_blank');
      return;
    }

    await attemptConnection(phantomWallet);
  }, [isMobile, phantomWallet, attemptConnection]);

  return { connected, phantomWallet, handleConnectWallet, publicKey };
};