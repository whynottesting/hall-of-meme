import { useState, useEffect, useCallback } from 'react';
import { toast } from "@/hooks/use-toast";
import { useIsMobile } from "@/hooks/use-mobile";
import { PhantomWallet, PHANTOM_CONSTANTS } from '@/types/phantom';
import { usePhantomInstance } from './usePhantomInstance';

export const usePhantomWallet = () => {
  const [connected, setConnected] = useState(false);
  const [phantomWallet, setPhantomWallet] = useState<PhantomWallet | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const isMobile = useIsMobile();

  const getPhantomInstance = usePhantomInstance();

  const resetWalletState = useCallback(() => {
    setConnected(false);
    setPublicKey(null);
    console.log("üîÑ √âtat du wallet r√©initialis√©");
  }, []);

  const attemptConnection = useCallback(async (wallet: PhantomWallet): Promise<boolean> => {
    try {
      console.log("üîÑ Tentative de connexion au wallet...");
      
      // R√©initialiser l'√©tat avant la tentative de connexion
      resetWalletState();
      
      // D√©connecter d'abord pour s'assurer d'une connexion propre
      try {
        await wallet.disconnect();
        console.log("üîå D√©connexion r√©ussie pour une connexion propre");
      } catch (e) {
        console.log("Info: Pas de d√©connexion n√©cessaire");
      }
      
      // V√©rifier si le wallet a une cl√© publique
      if (!wallet.publicKey) {
        console.log("üîÑ Demande de connexion au wallet...");
        const response = await wallet.connect();
        
        if (response.publicKey) {
          const key = response.publicKey.toString();
          console.log("‚úÖ Connect√© avec succ√®s! Cl√© publique:", key);
          setPublicKey(key);
          setConnected(true);
          
          // Demander explicitement les permissions de transaction
          try {
            console.log("üîÑ Demande des permissions de transaction...");
            await wallet.request({ 
              method: "connect",
              params: {
                permissions: ["sign_transaction", "sign_message"]
              }
            });
            console.log("‚úÖ Permissions de transaction accord√©es");
            
            // V√©rifier le solde pour confirmer l'acc√®s
            try {
              const balance = await wallet.request({
                method: 'getBalance',
              });
              console.log("üí∞ Solde du wallet:", balance);
            } catch (balanceError) {
              console.warn("‚ö†Ô∏è Impossible de v√©rifier le solde:", balanceError);
            }
            
            toast({
              title: "Wallet Connect√©",
              description: "Connexion r√©ussie √† Phantom wallet avec les permissions de transaction",
            });
            return true;
          } catch (permError) {
            console.error("‚ùå Erreur lors de la demande des permissions:", permError);
            resetWalletState();
            toast({
              title: "Attention",
              description: "Veuillez accorder les permissions de transaction pour pouvoir effectuer des achats",
              variant: "destructive",
            });
            return false;
          }
        }
      }
      return false;
    } catch (error) {
      console.error("‚ùå √âchec de la tentative de connexion:", error);
      resetWalletState();
      if (!isMobile) {
        toast({
          title: "√âchec de la Connexion",
          description: "Impossible de se connecter √† Phantom wallet. Assurez-vous que l'extension est install√©e, d√©verrouill√©e et en mode Devnet.",
          variant: "destructive",
        });
      }
      return false;
    }
  }, [isMobile, resetWalletState]);

  useEffect(() => {
    const initializeWallet = async () => {
      const wallet = getPhantomInstance();
      if (wallet) {
        console.log("üîÑ Initialisation du wallet...");
        setPhantomWallet(wallet);
        
        // V√©rifier l'√©tat de connexion r√©el
        if (wallet.publicKey) {
          console.log("üîÑ Wallet d√©j√† connect√©, cl√©:", wallet.publicKey.toString());
          setPublicKey(wallet.publicKey.toString());
          setConnected(true);
          
          // V√©rifier/demander les permissions pour la connexion existante
          try {
            await wallet.request({ 
              method: "connect",
              params: {
                permissions: ["sign_transaction", "sign_message"]
              }
            });
            console.log("‚úÖ Permissions de transaction v√©rifi√©es/accord√©es");
          } catch (error) {
            console.warn("‚ö†Ô∏è Permissions de transaction non accord√©es:", error);
            // Forcer une nouvelle connexion pour obtenir les permissions
            await attemptConnection(wallet);
          }
        } else {
          console.log("‚ùå Wallet non connect√© lors de l'initialisation");
          resetWalletState();
        }
        
        wallet.on('connect', () => {
          console.log("üîå √âv√©nement connect d√©tect√©");
          if (wallet.publicKey) {
            const key = wallet.publicKey.toString();
            console.log("‚úÖ Connect√© avec la cl√©:", key);
            setPublicKey(key);
            setConnected(true);
          }
        });
        
        wallet.on('disconnect', () => {
          console.log("üîå √âv√©nement disconnect d√©tect√©");
          resetWalletState();
          toast({
            title: "Wallet D√©connect√©",
            description: "D√©connexion du Phantom wallet",
          });
        });
      }
    };

    initializeWallet();
  }, [getPhantomInstance, attemptConnection, resetWalletState]);

  const handleConnectWallet = useCallback(async () => {
    console.log("üîÑ D√©marrage du processus de connexion...");
    
    if (isMobile && !phantomWallet) {
      console.log("üì± Redirection vers Phantom mobile");
      const currentUrl = window.location.href;
      console.log("URL actuelle:", currentUrl);
      
      // Construction du deep link selon la documentation Phantom
      const encodedUrl = encodeURIComponent(currentUrl);
      const encodedRef = encodeURIComponent(currentUrl);
      const phantomDeepLink = `https://phantom.app/ul/browse/${encodedUrl}?ref=${encodedRef}`;
      
      console.log("üîó Deep link g√©n√©r√©:", phantomDeepLink);
      window.location.href = phantomDeepLink;
      return;
    }

    if (!phantomWallet) {
      console.log("‚ö†Ô∏è Phantom non d√©tect√©, redirection vers la page de t√©l√©chargement");
      toast({
        title: "Phantom Wallet Non Trouv√©",
        description: "Veuillez installer Phantom Wallet pour continuer",
        variant: "destructive",
      });
      window.open(PHANTOM_CONSTANTS.DOWNLOAD_LINK, '_blank');
      return;
    }

    await attemptConnection(phantomWallet);
  }, [isMobile, phantomWallet, attemptConnection]);

  return { connected, phantomWallet, handleConnectWallet, publicKey };
};